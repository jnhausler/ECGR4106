{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "r9QNGbC1aTBR"
      },
      "outputs": [],
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n",
        " \n",
        "# Data Visualisation \n",
        "import matplotlib.pyplot as plt  \n",
        "import seaborn as sns \n",
        "import tensorflow as tf\n",
        "from tensorflow.python.client import device_lib\n",
        "\n",
        "import torch\n",
        "import torch.optim as optim\n",
        "import glob\n",
        "from torchvision import transforms\n",
        "import torch.nn as nn\n",
        "import datetime\n",
        "import torch.nn.functional as F"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model for Problem 1"
      ],
      "metadata": {
        "id": "98phhopMgKuA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class myNet(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.conv1 = nn.Conv2d(3, 16, kernel_size = 3, padding = 1)\n",
        "    self.conv2 = nn.Conv2d(16, 8, kernel_size = 3, padding = 1)\n",
        "    self.fc1 = nn.Linear(8 * 8 * 8, 32)\n",
        "    self.fc2 = nn.Linear(32, 10)\n",
        "\n",
        "  def forward(self, x):\n",
        "      out = F.max_pool2d(torch.tanh(self.conv1(x)), 2)\n",
        "      out = F.max_pool2d(torch.tanh(self.conv2(out)), 2)\n",
        "      out = out.view(-1, 8 * 8 * 8)\n",
        "      out = torch.tanh(self.fc1(out))\n",
        "      out = self.fc2(out)\n",
        "      return out"
      ],
      "metadata": {
        "id": "MYkISq4KamMQ"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 124,
          "referenced_widgets": [
            "7919495cda894c5790a8f7a75b83f888",
            "d9c200eb077a470081903085fe09c471",
            "417bd804612446fda416c13d72435255",
            "9c758662125c4ce2b0b3522c721dae8c",
            "ed91ee0a565547b1946a6ebed037dc9e",
            "980bcad0a9e5446ea60639be94239ec1",
            "4207213b557e40caaa6d66d1839981e6",
            "bb32d29fb94644eabb96c68da37b5ba8",
            "7b53b7ceba1a458690f8c292fa6cc754",
            "4ff4bca5ae0b4b6d81e2e1b0d5f715ac",
            "4ef628b83ac2453ab9455f3ee75f9e11"
          ]
        },
        "id": "UAq8R-LSnAdD",
        "outputId": "646c8703-9a50-4f5f-d36d-c8613bbcf169"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to Documents/School/ECGR 4106/dlwpt-code-master/p1ch7/cifar-10-python.tar.gz\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/170498071 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7919495cda894c5790a8f7a75b83f888"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting Documents/School/ECGR 4106/dlwpt-code-master/p1ch7/cifar-10-python.tar.gz to Documents/School/ECGR 4106/dlwpt-code-master/p1ch7\n",
            "Files already downloaded and verified\n"
          ]
        }
      ],
      "source": [
        "from torchvision import datasets\n",
        "data_path = 'Documents/School/ECGR 4106/dlwpt-code-master/p1ch7'\n",
        "cifar10 = datasets.CIFAR10(data_path, train=True, download=True, transform = transforms.ToTensor())\n",
        "cifar10_val = datasets.CIFAR10(data_path, train=False, download=True, transform = transforms.ToTensor())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J_Z_ng_2hWL9",
        "outputId": "5c126064-4322-4c45-f762-2de4e9461ee0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training on device cuda.\n"
          ]
        }
      ],
      "source": [
        "device = (torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu'))\n",
        "print(f\"Training on device {device}.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "pY2mr7yIg0ys"
      },
      "outputs": [],
      "source": [
        "def training_loop(n_epochs, optimizer, model, loss_fn, train_loader):\n",
        "  for epoch in range(1, n_epochs + 1):\n",
        "    loss_train = 0.0\n",
        "\n",
        "    for imgs, labels in train_loader:\n",
        "      imgs = imgs.to(device = device)\n",
        "      labels = labels.to(device = device)\n",
        "      outputs = model(imgs)\n",
        "      loss = loss_fn(outputs, labels)\n",
        "\n",
        "      optimizer.zero_grad()\n",
        "      loss.backward()\n",
        "      optimizer.step()\n",
        "\n",
        "      loss_train += loss.item()\n",
        "\n",
        "    if epoch == 1 or epoch % 10 == 0:\n",
        "      print('{} Epoch {}, Training loss {}'.format(\n",
        "          datetime.datetime.now(), epoch, loss_train / len(train_loader)))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = myNet().to(device = device)\n",
        "optimizer = optim.SGD(model.parameters(), lr = 1e-2)\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "train_loader = torch.utils.data.DataLoader(cifar10, batch_size = 64, shuffle=True)"
      ],
      "metadata": {
        "id": "ThFFSJwrMByJ"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3gVOBrrPimIz",
        "outputId": "ee264148-26ee-45db-9768-2e9cf953d19e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-03-29 15:05:28.804946 Epoch 1, Training loss 2.2205130387755\n",
            "2022-03-29 15:06:25.430827 Epoch 10, Training loss 1.3974686277187085\n",
            "2022-03-29 15:07:28.943879 Epoch 20, Training loss 1.1819876383637529\n",
            "2022-03-29 15:08:31.757363 Epoch 30, Training loss 1.0763769543841673\n",
            "2022-03-29 15:09:34.815489 Epoch 40, Training loss 1.0060340329204374\n",
            "2022-03-29 15:10:37.836962 Epoch 50, Training loss 0.9565117436906566\n",
            "2022-03-29 15:11:40.823760 Epoch 60, Training loss 0.9168660847274849\n",
            "2022-03-29 15:12:44.001404 Epoch 70, Training loss 0.8811983329713192\n",
            "2022-03-29 15:13:47.038256 Epoch 80, Training loss 0.850500595119908\n",
            "2022-03-29 15:14:49.951303 Epoch 90, Training loss 0.8273855668809408\n",
            "2022-03-29 15:15:52.737068 Epoch 100, Training loss 0.8063878886916144\n",
            "2022-03-29 15:16:55.936957 Epoch 110, Training loss 0.7851617465848508\n",
            "2022-03-29 15:17:58.909010 Epoch 120, Training loss 0.7681522678841105\n",
            "2022-03-29 15:19:01.913905 Epoch 130, Training loss 0.7518230424741345\n",
            "2022-03-29 15:20:04.694106 Epoch 140, Training loss 0.7367584458397477\n",
            "2022-03-29 15:21:07.576878 Epoch 150, Training loss 0.7246386128694505\n",
            "2022-03-29 15:22:10.887919 Epoch 160, Training loss 0.7114044694644411\n",
            "2022-03-29 15:23:13.241332 Epoch 170, Training loss 0.7008243211547432\n",
            "2022-03-29 15:24:16.313152 Epoch 180, Training loss 0.6900028932048842\n",
            "2022-03-29 15:25:19.291440 Epoch 190, Training loss 0.6778864232475496\n",
            "2022-03-29 15:26:22.650848 Epoch 200, Training loss 0.6710411346019687\n",
            "2022-03-29 15:27:25.623837 Epoch 210, Training loss 0.6624240387050088\n",
            "2022-03-29 15:28:28.053833 Epoch 220, Training loss 0.6529464599345346\n",
            "2022-03-29 15:29:30.934224 Epoch 230, Training loss 0.6471326529522381\n",
            "2022-03-29 15:30:33.632411 Epoch 240, Training loss 0.640874023518294\n",
            "2022-03-29 15:31:36.659859 Epoch 250, Training loss 0.6344940868942329\n",
            "2022-03-29 15:32:39.643893 Epoch 260, Training loss 0.6291069692510474\n",
            "2022-03-29 15:33:42.351265 Epoch 270, Training loss 0.6211491897130561\n",
            "2022-03-29 15:34:44.966529 Epoch 280, Training loss 0.6154346671860541\n",
            "2022-03-29 15:35:47.725351 Epoch 290, Training loss 0.6100210349273194\n",
            "2022-03-29 15:36:50.741122 Epoch 300, Training loss 0.60659864400049\n"
          ]
        }
      ],
      "source": [
        "training_loop(\n",
        "    n_epochs = 300,\n",
        "    optimizer = optimizer,\n",
        "    model = model,\n",
        "    loss_fn = loss_fn,\n",
        "    train_loader = train_loader\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "AP0xo1A0rcFk"
      },
      "outputs": [],
      "source": [
        "def validate(model, train_loader, val_loader):\n",
        "  for name, loader in [(\"train\", train_loader), (\"val\", val_loader)]:\n",
        "    correct = 0\n",
        "    total = 0 \n",
        "    \n",
        "    with torch.no_grad():\n",
        "      for imgs, labels in loader:\n",
        "        imgs = imgs.to(device = device)\n",
        "        labels = labels.to(device = device)\n",
        "        outputs = model(imgs)\n",
        "        _, predicted = torch.max(outputs, dim = 1)\n",
        "        total += labels.shape[0]\n",
        "        correct += int((predicted == labels).sum())\n",
        "\n",
        "  print(\"Accuracy: {}: {:.2f}\".format(name, correct / total))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "beo76Hw2EhXP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "169e4e2c-1243-46a5-9947-4d2cb87a7d76"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: val: 0.10\n"
          ]
        }
      ],
      "source": [
        "val_loader = torch.utils.data.DataLoader(cifar10_val, batch_size = 64, shuffle = False)\n",
        "validate(model, train_loader, val_loader)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "e7JzXF-kIJEk"
      },
      "outputs": [],
      "source": [
        "class myNet2(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.conv1 = nn.Conv2d(3, 16, kernel_size = 3, padding = 1)\n",
        "    self.conv2 = nn.Conv2d(16, 8, kernel_size = 3, padding = 1)\n",
        "    self.conv3 = nn.Conv2d(8, 4, kernel_size = 3, padding = 1)\n",
        "    self.fc1 = nn.Linear(4 * 4 * 4, 32)\n",
        "    self.fc2 = nn.Linear(32, 16)\n",
        "    self.fc3 = nn.Linear(16, 10)\n",
        "\n",
        "  def forward(self, x):\n",
        "      out = F.max_pool2d(torch.tanh(self.conv1(x)), 2)\n",
        "      out = F.max_pool2d(torch.tanh(self.conv2(out)), 2)\n",
        "      out = F.max_pool2d(torch.tanh(self.conv3(out)), 2)\n",
        "      out = out.view(-1, 4 * 4 * 4)\n",
        "      out = torch.tanh(self.fc1(out))\n",
        "      out = torch.tanh(self.fc2(out))\n",
        "      out = self.fc3(out)\n",
        "      return out"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model2 = myNet2().to(device = device)\n",
        "optimizer2 = optim.SGD(model2.parameters(), lr = 1e-2)"
      ],
      "metadata": {
        "id": "QK5kAWPLZjpM"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AvYmNVSqMDoN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5282edfa-f66d-423e-aa18-90b1e11409d5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-03-29 15:37:04.012927 Epoch 1, Training loss 2.30524820958257\n",
            "2022-03-29 15:38:03.810826 Epoch 10, Training loss 1.8384884990694579\n",
            "2022-03-29 15:39:10.088075 Epoch 20, Training loss 1.4261027147702854\n",
            "2022-03-29 15:40:16.520859 Epoch 30, Training loss 1.299415017409093\n",
            "2022-03-29 15:41:22.959886 Epoch 40, Training loss 1.2343255295168103\n",
            "2022-03-29 15:42:29.429139 Epoch 50, Training loss 1.1806112399034183\n",
            "2022-03-29 15:43:35.777056 Epoch 60, Training loss 1.1392918713867206\n",
            "2022-03-29 15:44:42.777866 Epoch 70, Training loss 1.105425037462693\n",
            "2022-03-29 15:45:49.488954 Epoch 80, Training loss 1.0770147913862067\n",
            "2022-03-29 15:46:56.571357 Epoch 90, Training loss 1.0536928966527095\n",
            "2022-03-29 15:48:03.462238 Epoch 100, Training loss 1.0337124868579532\n",
            "2022-03-29 15:49:10.635433 Epoch 110, Training loss 1.0188028236941609\n",
            "2022-03-29 15:50:17.884072 Epoch 120, Training loss 1.005916022507431\n",
            "2022-03-29 15:51:24.240650 Epoch 130, Training loss 0.9905435315635808\n",
            "2022-03-29 15:52:30.766084 Epoch 140, Training loss 0.9813021314723412\n",
            "2022-03-29 15:53:37.338662 Epoch 150, Training loss 0.970010615523209\n",
            "2022-03-29 15:54:44.183245 Epoch 160, Training loss 0.9575166645867136\n",
            "2022-03-29 15:55:51.033871 Epoch 170, Training loss 0.9524298398695943\n",
            "2022-03-29 15:56:58.367914 Epoch 180, Training loss 0.9432482381763361\n",
            "2022-03-29 15:58:05.356620 Epoch 190, Training loss 0.9362457390026668\n",
            "2022-03-29 15:59:11.972472 Epoch 200, Training loss 0.9299389184893244\n",
            "2022-03-29 16:00:18.849785 Epoch 210, Training loss 0.924854350593084\n",
            "2022-03-29 16:01:25.654829 Epoch 220, Training loss 0.9187905490398407\n",
            "2022-03-29 16:02:32.738277 Epoch 230, Training loss 0.914393236951145\n",
            "2022-03-29 16:03:39.508229 Epoch 240, Training loss 0.9121764424969169\n",
            "2022-03-29 16:04:46.314356 Epoch 250, Training loss 0.9059197387427015\n",
            "2022-03-29 16:05:53.138779 Epoch 260, Training loss 0.9030963227419597\n",
            "2022-03-29 16:06:59.465680 Epoch 270, Training loss 0.89765363943089\n",
            "2022-03-29 16:08:06.118987 Epoch 280, Training loss 0.892312727468398\n",
            "2022-03-29 16:09:12.815548 Epoch 290, Training loss 0.8899345549628558\n",
            "2022-03-29 16:10:19.184619 Epoch 300, Training loss 0.8887273967266083\n"
          ]
        }
      ],
      "source": [
        "training_loop(\n",
        "    n_epochs = 300,\n",
        "    optimizer = optimizer2,\n",
        "    model = model2,\n",
        "    loss_fn = loss_fn,\n",
        "    train_loader = train_loader\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "dxrBir98VQi8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "25378712-4430-4c8e-b82f-c12c42ffa13c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: val: 0.10\n"
          ]
        }
      ],
      "source": [
        "validate(model2, train_loader, val_loader)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "WoUu1SXtswXh"
      },
      "outputs": [],
      "source": [
        "class ResBlock(nn.Module):\n",
        "  def __init__(self, n_chans):\n",
        "    super(ResBlock, self).__init__()\n",
        "    self.conv = nn.Conv2d(n_chans, n_chans, kernel_size=3, padding=1, bias=False)\n",
        "    self.batch_norm = nn.BatchNorm2d(num_features=n_chans)\n",
        "    torch.nn.init.kaiming_normal_(self.conv.weight,nonlinearity='relu')\n",
        "    torch.nn.init.constant_(self.batch_norm.weight, 0.5)\n",
        "    torch.nn.init.zeros_(self.batch_norm.bias)\n",
        "\n",
        "  def forward(self, x):\n",
        "    out = self.conv(x)\n",
        "    out = self.batch_norm(out)\n",
        "    out = torch.relu(out)\n",
        "    return out + x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "1w6uBS9Wl8iK"
      },
      "outputs": [],
      "source": [
        "class ResNet10(nn.Module):\n",
        "  def __init__(self, n_chans1 = 32, n_blocks = 10):\n",
        "    super().__init__()\n",
        "    self.n_chans1 = n_chans1\n",
        "    self.conv1 = nn.Conv2d(3, n_chans1, kernel_size=2, padding=1)\n",
        "    self.resblocks = nn.Sequential(\n",
        "        *(n_blocks * [ResBlock(n_chans = n_chans1)]))\n",
        "    self.fc1 = nn.Linear(8 * 8 * n_chans1, 32)\n",
        "    self.fc2 = nn.Linear(32, 10)\n",
        "\n",
        "  def forward(self, x):\n",
        "    out = F.max_pool2d(torch.relu(self.conv1(x)), 2)\n",
        "    out = self.resblocks(out)\n",
        "    out = F.max_pool2d(out, 2)\n",
        "    out = out.view(-1, 8 * 8 * self.n_chans1)\n",
        "    out = torch.relu(self.fc1(out))\n",
        "    out = self.fc2(out)\n",
        "    return out"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model3 = ResNet10(n_chans1 = 32, n_blocks = 10).to(device = device)\n",
        "optimizer3 = optim.SGD(model3.parameters(), lr = 1e-2)"
      ],
      "metadata": {
        "id": "OfXFCYn1ZocS"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "80c7PvBOouDJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a4121d5-94bd-448e-9ae6-fa85007ba5e2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-03-31 00:47:30.970981 Epoch 1, Training loss 1.7226131639212294\n",
            "2022-03-31 00:49:02.257317 Epoch 10, Training loss 0.840124023959155\n",
            "2022-03-31 00:50:46.380249 Epoch 20, Training loss 0.6268810248359695\n",
            "2022-03-31 00:52:28.266487 Epoch 30, Training loss 0.4992268801764454\n",
            "2022-03-31 00:54:13.427234 Epoch 40, Training loss 0.4004817776705908\n",
            "2022-03-31 00:55:58.428502 Epoch 50, Training loss 0.31749955118845796\n",
            "2022-03-31 00:57:42.737237 Epoch 60, Training loss 0.2717183441057077\n",
            "2022-03-31 00:59:26.840864 Epoch 70, Training loss 0.21651792183251636\n",
            "2022-03-31 01:01:09.139640 Epoch 80, Training loss 0.18809384294806997\n",
            "2022-03-31 01:02:51.961279 Epoch 90, Training loss 0.16253000739342569\n",
            "2022-03-31 01:04:34.292385 Epoch 100, Training loss 0.14624600213430727\n",
            "2022-03-31 01:06:16.682810 Epoch 110, Training loss 0.13297044844997813\n",
            "2022-03-31 01:07:58.680428 Epoch 120, Training loss 0.11456788700940969\n",
            "2022-03-31 01:09:41.091417 Epoch 130, Training loss 0.09771541056349455\n",
            "2022-03-31 01:11:23.301622 Epoch 140, Training loss 0.10206075430915588\n",
            "2022-03-31 01:13:05.639565 Epoch 150, Training loss 0.07770030786086211\n",
            "2022-03-31 01:14:47.911482 Epoch 160, Training loss 0.0758341005395936\n",
            "2022-03-31 01:16:30.120809 Epoch 170, Training loss 0.07080274487442463\n",
            "2022-03-31 01:18:12.298068 Epoch 180, Training loss 0.08934988575818403\n",
            "2022-03-31 01:19:54.607666 Epoch 190, Training loss 0.07122878832510336\n",
            "2022-03-31 01:21:36.801804 Epoch 200, Training loss 0.11782354408341562\n"
          ]
        }
      ],
      "source": [
        "training_loop(\n",
        "    n_epochs = 200,\n",
        "    optimizer = optimizer3,\n",
        "    model = model3,\n",
        "    loss_fn = loss_fn,\n",
        "    train_loader = train_loader\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "jslRgJdPtUJH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a7b633e-f845-4779-ec07-c9f7a85ef666"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: val: 0.10\n"
          ]
        }
      ],
      "source": [
        "validate(model3, train_loader, val_loader)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def training_loop_l2reg(n_epochs, optimizer, model, loss_fn,\n",
        "                        train_loader):\n",
        "    for epoch in range(1, n_epochs + 1):\n",
        "        loss_train = 0.0\n",
        "        for imgs, labels in train_loader:\n",
        "            imgs = imgs.to(device=device)\n",
        "            labels = labels.to(device=device)\n",
        "            outputs = model(imgs)\n",
        "            loss = loss_fn(outputs, labels)\n",
        "\n",
        "            l2_lambda = 0.001\n",
        "            l2_norm = sum(p.pow(2.0).sum()\n",
        "                          for p in model.parameters())  # <1>\n",
        "            loss = loss + l2_lambda * l2_norm\n",
        "\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            \n",
        "            loss_train += loss.item()\n",
        "        if epoch == 1 or epoch % 10 == 0:\n",
        "            print('{} Epoch {}, Training loss {}'.format(\n",
        "                datetime.datetime.now(), epoch,\n",
        "                loss_train / len(train_loader)))"
      ],
      "metadata": {
        "id": "pfUD83fNdfQv"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_loop_l2reg(\n",
        "    n_epochs = 200,\n",
        "    optimizer = optimizer3,\n",
        "    model = model3,\n",
        "    loss_fn = loss_fn,\n",
        "    train_loader = train_loader\n",
        ")"
      ],
      "metadata": {
        "id": "Mw-qCdqab8lD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e2ec5aba-710b-4232-ad14-ad576c3c9399"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-03-31 01:37:17.158905 Epoch 1, Training loss 0.9304486506277948\n",
            "2022-03-31 01:38:55.601875 Epoch 10, Training loss 0.691330927488444\n",
            "2022-03-31 01:40:45.054477 Epoch 20, Training loss 0.523521726622301\n",
            "2022-03-31 01:42:34.349212 Epoch 30, Training loss 0.5297729964832516\n",
            "2022-03-31 01:44:23.727207 Epoch 40, Training loss 0.5036001299195887\n",
            "2022-03-31 01:46:13.140720 Epoch 50, Training loss 0.46183470146887745\n",
            "2022-03-31 01:48:02.658425 Epoch 60, Training loss 0.4639984991239465\n",
            "2022-03-31 01:49:52.071549 Epoch 70, Training loss 0.46012523393039506\n",
            "2022-03-31 01:51:41.661027 Epoch 80, Training loss 0.46189687040913135\n",
            "2022-03-31 01:53:32.593269 Epoch 90, Training loss 0.45638127057143796\n",
            "2022-03-31 01:55:24.469147 Epoch 100, Training loss 0.44299071752811636\n",
            "2022-03-31 01:57:14.505374 Epoch 110, Training loss 0.4576426198720322\n",
            "2022-03-31 01:59:04.371428 Epoch 120, Training loss 0.4427891519597119\n",
            "2022-03-31 02:00:54.450599 Epoch 130, Training loss 0.4538062441989284\n",
            "2022-03-31 02:02:44.046610 Epoch 140, Training loss 0.4267875684039367\n",
            "2022-03-31 02:04:36.614849 Epoch 150, Training loss 0.42583885182962394\n",
            "2022-03-31 02:06:28.183097 Epoch 160, Training loss 0.4292785105726603\n",
            "2022-03-31 02:08:17.618949 Epoch 170, Training loss 0.42519065653881455\n",
            "2022-03-31 02:10:06.386537 Epoch 180, Training loss 0.41376590423876675\n",
            "2022-03-31 02:11:55.433853 Epoch 190, Training loss 0.4277483820915222\n",
            "2022-03-31 02:13:44.833102 Epoch 200, Training loss 0.41963417645153184\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "validate(model3, train_loader, val_loader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fF-P3kYLeel4",
        "outputId": "4eab5062-5576-4ae5-cead-c77758da1866"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: val: 0.10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class NetDropout(nn.Module):\n",
        "    def __init__(self, n_chans1=32):\n",
        "        super().__init__()\n",
        "        self.n_chans1 = n_chans1\n",
        "        self.conv1 = nn.Conv2d(3, n_chans1, kernel_size=3, padding=1)\n",
        "        self.conv1_dropout = nn.Dropout2d(p=0.3)\n",
        "        self.conv2 = nn.Conv2d(n_chans1, n_chans1 // 2, kernel_size=3,\n",
        "                               padding=1)\n",
        "        self.conv2_dropout = nn.Dropout2d(p=0.3)\n",
        "        self.fc1 = nn.Linear(8 * 8 * n_chans1 // 2, 32)\n",
        "        self.fc2 = nn.Linear(32, 10)\n",
        "        \n",
        "    def forward(self, x):\n",
        "        out = F.max_pool2d(torch.tanh(self.conv1(x)), 2)\n",
        "        out = self.conv1_dropout(out)\n",
        "        out = F.max_pool2d(torch.tanh(self.conv2(out)), 2)\n",
        "        out = self.conv2_dropout(out)\n",
        "        out = out.view(-1, 8 * 8 * self.n_chans1 // 2)\n",
        "        out = torch.tanh(self.fc1(out))\n",
        "        out = self.fc2(out)\n",
        "        return out"
      ],
      "metadata": {
        "id": "XUyGiOeed8tI"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model4 = NetDropout(n_chans1 = 32).to(device = device)\n",
        "optimizer4 = optim.SGD(model4.parameters(), lr = 1e-2)"
      ],
      "metadata": {
        "id": "kK9mAzRKeM-Z"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_loop(\n",
        "    n_epochs = 200,\n",
        "    optimizer = optimizer4,\n",
        "    model = model4,\n",
        "    loss_fn = loss_fn,\n",
        "    train_loader = train_loader\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xoE5m-JveY6F",
        "outputId": "b5603d3e-86f4-4365-f5e7-f8f48124e457"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-03-31 03:27:46.584020 Epoch 1, Training loss 2.1687046324505523\n",
            "2022-03-31 03:28:44.568301 Epoch 10, Training loss 1.4991611635593503\n",
            "2022-03-31 03:29:49.359142 Epoch 20, Training loss 1.3411576359168342\n",
            "2022-03-31 03:30:54.054866 Epoch 30, Training loss 1.2402980712521108\n",
            "2022-03-31 03:31:58.767576 Epoch 40, Training loss 1.1742941536714353\n",
            "2022-03-31 03:33:05.704218 Epoch 50, Training loss 1.1256583381034528\n",
            "2022-03-31 03:34:12.466194 Epoch 60, Training loss 1.092482755251248\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "validate(model4, train_loader, val_loader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U-BwLbChekxf",
        "outputId": "a22ed202-896c-4c48-bdb7-0a80c893e2dd"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: val: 0.10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class NetBatchNorm(nn.Module):\n",
        "    def __init__(self, n_chans1=32):\n",
        "        super().__init__()\n",
        "        self.n_chans1 = n_chans1\n",
        "        self.conv1 = nn.Conv2d(3, n_chans1, kernel_size=3, padding=1)\n",
        "        self.conv1_batchnorm = nn.BatchNorm2d(num_features=n_chans1)\n",
        "        self.conv2 = nn.Conv2d(n_chans1, n_chans1 // 2, kernel_size=3, \n",
        "                               padding=1)\n",
        "        self.conv2_batchnorm = nn.BatchNorm2d(num_features=n_chans1 // 2)\n",
        "        self.fc1 = nn.Linear(8 * 8 * n_chans1 // 2, 32)\n",
        "        self.fc2 = nn.Linear(32, 10)\n",
        "        \n",
        "    def forward(self, x):\n",
        "        out = self.conv1_batchnorm(self.conv1(x))\n",
        "        out = F.max_pool2d(torch.tanh(out), 2)\n",
        "        out = self.conv2_batchnorm(self.conv2(out))\n",
        "        out = F.max_pool2d(torch.tanh(out), 2)\n",
        "        out = out.view(-1, 8 * 8 * self.n_chans1 // 2)\n",
        "        out = torch.tanh(self.fc1(out))\n",
        "        out = self.fc2(out)\n",
        "        return out"
      ],
      "metadata": {
        "id": "1fGcRRsnepiw"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model5 = NetBatchNorm(n_chans1 = 32).to(device = device)\n",
        "optimizer5 = optim.SGD(model5.parameters(), lr = 1e-2)"
      ],
      "metadata": {
        "id": "BM4-8yG7euvH"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "training_loop(\n",
        "    n_epochs = 200,\n",
        "    optimizer = optimizer5,\n",
        "    model = model5,\n",
        "    loss_fn = loss_fn,\n",
        "    train_loader = train_loader\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "00pF1016e2iQ",
        "outputId": "7aee8581-ed85-4876-e08c-cfab5deb93b8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-03-31 03:04:09.670501 Epoch 1, Training loss 1.7630933450006159\n",
            "2022-03-31 03:05:10.281638 Epoch 10, Training loss 0.9485485260291477\n",
            "2022-03-31 03:06:16.789957 Epoch 20, Training loss 0.7853123845194306\n",
            "2022-03-31 03:07:23.595481 Epoch 30, Training loss 0.6987789964584439\n",
            "2022-03-31 03:08:30.569095 Epoch 40, Training loss 0.6320185785555779\n",
            "2022-03-31 03:09:38.267141 Epoch 50, Training loss 0.5780860558723855\n",
            "2022-03-31 03:10:44.865223 Epoch 60, Training loss 0.5302790786375475\n",
            "2022-03-31 03:11:51.582820 Epoch 70, Training loss 0.4885174634930728\n",
            "2022-03-31 03:12:58.216901 Epoch 80, Training loss 0.4531261811171041\n",
            "2022-03-31 03:14:04.765954 Epoch 90, Training loss 0.41728339666295844\n",
            "2022-03-31 03:15:11.415833 Epoch 100, Training loss 0.3854062951662961\n",
            "2022-03-31 03:16:18.025505 Epoch 110, Training loss 0.3575270604104032\n",
            "2022-03-31 03:17:24.590885 Epoch 120, Training loss 0.3311128199786481\n",
            "2022-03-31 03:18:32.252492 Epoch 130, Training loss 0.3071599845081339\n",
            "2022-03-31 03:19:39.079184 Epoch 140, Training loss 0.28200209523786973\n",
            "2022-03-31 03:20:45.599542 Epoch 150, Training loss 0.26374830281757333\n",
            "2022-03-31 03:21:52.213834 Epoch 160, Training loss 0.24668514988649531\n",
            "2022-03-31 03:22:58.747926 Epoch 170, Training loss 0.23070425572602646\n",
            "2022-03-31 03:24:05.304345 Epoch 180, Training loss 0.21720192780541947\n",
            "2022-03-31 03:25:12.549881 Epoch 190, Training loss 0.20267129904778716\n",
            "2022-03-31 03:26:19.920203 Epoch 200, Training loss 0.18796116482380712\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "validate(model5, train_loader, val_loader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-PgTXZ6Te5fw",
        "outputId": "6bfd9c2b-83d4-4a77-8797-de606b747fe0"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: val: 0.64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "064gp5WsAu-B"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [],
      "name": "HW3_801053745_Hausler_J.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "7919495cda894c5790a8f7a75b83f888": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d9c200eb077a470081903085fe09c471",
              "IPY_MODEL_417bd804612446fda416c13d72435255",
              "IPY_MODEL_9c758662125c4ce2b0b3522c721dae8c"
            ],
            "layout": "IPY_MODEL_ed91ee0a565547b1946a6ebed037dc9e"
          }
        },
        "d9c200eb077a470081903085fe09c471": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_980bcad0a9e5446ea60639be94239ec1",
            "placeholder": "​",
            "style": "IPY_MODEL_4207213b557e40caaa6d66d1839981e6",
            "value": ""
          }
        },
        "417bd804612446fda416c13d72435255": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bb32d29fb94644eabb96c68da37b5ba8",
            "max": 170498071,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7b53b7ceba1a458690f8c292fa6cc754",
            "value": 170498071
          }
        },
        "9c758662125c4ce2b0b3522c721dae8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4ff4bca5ae0b4b6d81e2e1b0d5f715ac",
            "placeholder": "​",
            "style": "IPY_MODEL_4ef628b83ac2453ab9455f3ee75f9e11",
            "value": " 170499072/? [00:02&lt;00:00, 85835486.79it/s]"
          }
        },
        "ed91ee0a565547b1946a6ebed037dc9e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "980bcad0a9e5446ea60639be94239ec1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4207213b557e40caaa6d66d1839981e6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bb32d29fb94644eabb96c68da37b5ba8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7b53b7ceba1a458690f8c292fa6cc754": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4ff4bca5ae0b4b6d81e2e1b0d5f715ac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4ef628b83ac2453ab9455f3ee75f9e11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
